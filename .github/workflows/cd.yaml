name: Java CD Pipeline

on:
  push:
    branches: [ "main" ]
permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sixpack:latest

      - name: AWS login and docker image pull and run
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            set -euo pipefail
            APP="sixpack"
            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${APP}:latest"
            
            echo "[1] docker login"
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            echo "[2] 대상 컨테이너만 정리"
            if sudo docker ps -a --format '{{.Names}}' | grep -q "^${APP}$"; then
              sudo docker rm -f "${APP}"
            fi

            echo "[3] 이미지 Pull (latest)"
            sudo docker pull "${IMAGE}"
            echo "docker pull 성공: ${IMAGE}"

            echo "[4] 새 컨테이너 실행"
            sudo docker run -d -p 8081:8080 \
              --name "${APP}" \
              --restart unless-stopped \
              --network=signoz-net \
              "${IMAGE}"

            echo "[5] 미사용 이미지 정리"
            sudo docker image prune -f
            echo "✅ 배포 완료"

      - name: Notify Slack of CD Result
        if: always()
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${{ github.ref_name }}"
          AUTHOR="${{ github.actor }}"
          COMMIT_SHA="${{ github.sha }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "${STATUS}" = "success" ]; then
            ICON="✅"
            MESSAGE="CD Pipeline 성공"
          else
            ICON="❌"
            MESSAGE="CD Pipeline 실패"
          fi

          curl -X POST \
               -H 'Content-Type: application/json' \
               --data "{\"text\": \"${ICON} ${MESSAGE}\\n브랜치: ${BRANCH}\\n작성자: ${AUTHOR}\\n커밋: ${COMMIT_SHA}\\n로그: ${RUN_URL}\"}" \
               ${{ secrets.SLACK_WEBHOOK_URL_FOR_CICD }}
