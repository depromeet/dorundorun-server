name: Java CI Pipeline

on:
  pull_request:
    branches: [ 'main', 'develop' ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set YML
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_YML_PROD }}" | base64 --decode > ./src/main/resources/application-prod.yml

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build and Test
        run: ./gradlew clean build test --no-daemon

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (without push)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sixpack:pr-${{ github.event.pull_request.number }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/sixpack:buildcache
          load: true

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container \
            -e SPRING_PROFILES_ACTIVE=prod \
            ${{ secrets.DOCKERHUB_USERNAME }}/sixpack:pr-${{ github.event.pull_request.number }}
          
          echo "컨테이너 시작 대기 중..."
          sleep 30
          
          if docker ps | grep test-container; then
            echo "✅ Docker 컨테이너 정상 실행"
            docker logs test-container --tail 50
            docker stop test-container
          else
            echo "❌ Docker 컨테이너 실행 실패"
            docker logs test-container
            exit 1
          fi

      - name: Notify Slack of CI Result
        if: always()
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${{ github.ref_name }}"
          AUTHOR="${{ github.actor }}"
          COMMIT_SHA="${{ github.sha }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          if [ "${STATUS}" = "success" ]; then
            ICON="✅"
            MESSAGE="CI Pipeline 성공 (PR #${PR_NUMBER})"
          else
            ICON="❌"
            MESSAGE="CI Pipeline 실패 (PR #${PR_NUMBER})"
          fi

          curl -X POST \
               -H 'Content-Type: application/json' \
               --data "{\"text\": \"${ICON} ${MESSAGE}\\n브랜치: ${BRANCH}\\n작성자: ${AUTHOR}\\n커밋: ${COMMIT_SHA}\\n로그: ${RUN_URL}\"}" \
               ${{ secrets.SLACK_WEBHOOK_URL_FOR_CICD }}
