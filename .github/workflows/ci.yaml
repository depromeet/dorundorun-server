name: Java CI Pipeline

on:
  pull_request:
    branches: [ 'main', 'develop' ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set YML
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_YML_PROD }}" | base64 --decode > ./src/main/resources/application-prod.yml

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build the Project
        run: ./gradlew clean build test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sixpack:latest

      - name: Notify Slack of CI Result
        if: always()
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${{ github.ref_name }}"
          AUTHOR="${{ github.actor }}"
          COMMIT_SHA="${{ github.sha }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ "${STATUS}" = "success" ]; then
            ICON="✅"
            MESSAGE="CI Pipeline 성공"
          else
            ICON="❌"
            MESSAGE="CI Pipeline 실패"
          fi

          curl -X POST \
               -H 'Content-Type: application/json' \
               --data "{\"text\": \"${ICON} ${MESSAGE}\\n브랜치: ${BRANCH}\\n작성자: ${AUTHOR}\\n커밋: ${COMMIT_SHA}\\n로그: ${RUN_URL}\"}" \
               ${{ secrets.SLACK_WEBHOOK_URL_FOR_CICD }}
